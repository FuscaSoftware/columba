<?xml version="1.0"?>

<project name="macchiato" default="compile">
	
	<property name="name" value="macchiato" />
		
	<property name="src.dir" location="src" />
	<property name="build.dir" location="build" />
	<property name="dist.dir" location="dist" />
	<property name="lib.dir" location="lib" />
	<property name="docs.dir" location="docs" />

	<property name="debug" value="true" />

	<!-- Properties for all source dirs -->
	<property name="src.core" value="${src.dir}/java" />
	<property name="src.test" value="${src.dir}/test" />
	<property name="src.examples" value="${src.dir}/examples" />

	<!-- Properties for all build dirs -->
	<property name="build.core" value="${build.dir}/java" />
	<property name="build.test" value="${build.dir}/test" />

	<!-- Properties for all dist dirs -->
	<property name="dist.bin" value="${dist.dir}/${name}-${version}-bin" />
	<property name="dist.src" value="${dist.dir}/${name}-${version}-src" />
	<property name="dist.doc" value="${dist.dir}/${name}-${version}-doc" />

	<!-- Properties for the report generation -->
	<property name="reports.dir" value="reports" />
	<property name="reports.test" value="${reports.dir}/testresults" />
	<property name="reports.coverage" value="${reports.dir}/testcoverage" />

	<!-- Properties for all temporary file folders -->
	<property name="build.coverage.instrumented.dir" value="${build.dir}/instrumented-classes" />
	<property name="build.junit.xmlreport.dir" value="${build.dir}/testreport-xml" />


	<!-- Common targets =================================== -->
	<target name="init">
		<tstamp/>
		<property name="version" value="${DSTAMP}" />		
	</target>
	
	<target name="clean" depends="temp-clean">
		<delete dir="${dist.dir}" />
		<delete dir="${build.core}" />
		<delete dir="${build.test}" />
		<delete dir="${reports.dir}" />
	</target>

	<!-- Cleans temporary files that is used for report generation -->
	<target name="temp-clean">
		<delete>
			<fileset dir="." includes="jcoverage**" />
		</delete>
		<delete dir="${build.coverage.instrumented.dir}" />
		<delete dir="${build.junit.xmlreport.dir}" />
	</target>


	<!-- Build targets =================================== -->
	<target name="compile" depends="init">
		<echo message="compile ${name} core" />
		<mkdir dir="${build.core}" />
		<javac srcdir="${src.core}" destdir="${build.core}" encoding="ISO-8859-1" debug="${debug}" classpath="${classpath}:lib/je.jar" />
	</target>


	<!-- Test targets =================================== -->
	<target name="compile-tests" depends="compile">
		<echo message="compile ${name} test code" />
		<mkdir dir="${build.test}" />
		<javac srcdir="${src.test}" classpath="${build.core}:${lib.dir}/junit.jarlib/je.jar" destdir="${build.test}" encoding="ISO-8859-1" debug="yes" />
	</target>

	<target name="test" depends="compile-tests" description="--> run tests">
		<junit printsummary="off" fork="yes" haltonfailure="no">
			<formatter type="brief" usefile="false" />
			<classpath>
				<pathelement path="${build.core}" />
				<pathelement path="${build.test}" />
				<pathelement path="${lib}/junit.jar" />
				<pathelement path="${lib}/je.jar" />
			</classpath>
			<batchtest todir="${build.junit.xmlreport.dir}">
				<fileset dir="${src.test}">
					<include name="**/*Test*.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<!-- JavaDoc targets =================================== -->
	<target name="doc">
		<javadoc packagenames="org.columba.${name}.*"
			sourcepath="${src.core}"
			destdir="${docs.dir}"
			author="true"
			version="true"
			use="true"
			windowtitle="Macchiato API"					
			>
			<doctitle><![CDATA[<h1>Macchiato API, v ${version}</h1><div>This document is the API specification for the Macchiato API, version ${version}.</div>]]></doctitle>
		</javadoc>
	</target>
	
	<!-- Distribution targets =================================== -->
	<!-- pack the files into one jar file with automatic manifest file -->
	<target name="jar" depends="compile" description="creates the ${name}.jar file">
		<mkdir dir="${dist.dir}" />
		<delete file="${dist.dir}/${name}-${version}.jar" />
		<echo message="the jar file is going to be ${name}-${version}.jar " />
		<jar basedir="${build.core}" jarfile="${dist.dir}/${name}-${version}.jar">
			<include name="**" />
			<exclude name="**/*.jar" />
			<exclude name="README" />
			<exclude name="CHANGES" />
			<exclude name="LICENSE" />
			<exclude name="AUTHORS" />
			<exclude name="docs/**" />
			<exclude name="libs/**" />
		</jar>
	</target>

	<target name="release-bin" depends="jar">
		<mkdir dir="${dist.bin}" />
		<copy todir="${dist.bin}">
			<fileset dir="${basedir}">
				<include name="README" />
				<include name="CHANGES" />
				<include name="LICENSE" />
				<include name="AUTHORS" />
			</fileset>
		</copy>
		<copy todir="${dist.bin}" file="${dist.dir}/${name}-${version}.jar" />
		<zip destfile="${dist.dir}/${name}-${version}-bin.zip">
			<zipfileset dir="${dist.bin}" prefix="${name}-${version}-bin" />
		</zip>
	</target>

	<target name="release-src">
		<mkdir dir="${dist.src}" />
		<copy todir="${dist.src}">
			<fileset dir="${basedir}">
				<include name="src/**" />
				<include name="lib/**" />
				<include name="CHANGES" />
				<include name="LICENSE" />
				<include name="AUTHORS" />
				<include name="COMPILE" />
				<include name="build.xml" />
			</fileset>
		</copy>
		<zip destfile="${dist.dir}/${name}-${version}-src.zip" >
			<zipfileset dir="${dist.src}" prefix="${name}-${version}-src" />
			</zip>
	</target>

	<target name="release-doc" depends="doc" >
		<zip destfile="${dist.dir}/${name}-${version}-doc.zip" >
			<zipfileset dir="${docs.dir}" prefix="${name}-${version}-docs" />
			</zip>
	</target>

	<target name="release" >
		<antcall target="release-bin" />
		<antcall target="release-src" />
		<antcall target="release-doc" />		
	</target>
	
	
		<!-- Report generation =================================== -->

	<taskdef classpath="${lib.dir}/jcoverage.jar" resource="tasks.properties" />
	<target name="test-reports" depends="compile-tests" description="--> generates reports about testing">

		<!-- Instrument all classes prior to testing. -->
		<instrument todir="${build.coverage.instrumented.dir}">
			<fileset dir="${build.core}">
				<include name="**/*.class" />
			</fileset>
		</instrument>

		<!-- Start testing and generate a HTML report from tests -->
		<mkdir dir="${build.junit.xmlreport.dir}" />
		<junit printsummary="no" fork="yes" haltonerror="no">
			<classpath>
				<pathelement path="${build.coverage.instrumented.dir}" />
				<pathelement path="${build.core}" />
				<pathelement path="${build.test}" />
				<pathelement path="${lib}/junit.jar" />
			</classpath>
			<classpath location="lib\jcoverage.jar" />
			<formatter type="xml" />
			<batchtest todir="${build.junit.xmlreport.dir}">
				<fileset dir="${src.test}">
					<include name="**/*Test.java" />
					<exclude name="**/AllTests.java" />
				</fileset>
			</batchtest>
		</junit>
		<mkdir dir="${reports.test}" />
		<junitreport todir="${reports.test}">
			<fileset dir="${build.junit.xmlreport.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${reports.test}" />
		</junitreport>

		<!-- Generate a coverage report -->
		<report srcdir="${src.core}" destdir="${reports.coverage}" />
		<antcall target="temp-clean" />
	</target>
</project>
